app\api\clone-repo\route.js
```
import { simpleGit } from 'simple-git';
import path from 'path';
import fs from 'fs/promises';
import os from 'os';
import { v4 as uuidv4 } from 'uuid';
import { NextResponse } from 'next/server';

export async function POST(request) {
    try {
        const { repoLink } = await request.json();
        const repoName = `${repoLink.split('/').pop().replace('.git', '')}-${uuidv4()}`;
        const clonePath = path.join(os.tmpdir(), repoName);
        const git = simpleGit();
        await git.clone(repoLink, clonePath);

        async function generateStructure(basePath) {
            const items = await fs.readdir(basePath, { withFileTypes: true });
            const structure = [];

            for (const item of items) {
                const itemPath = path.join(basePath, item.name);
                if (item.isDirectory()) {
                    structure.push({
                        name: item.name,
                        type: 'directory',
                        children: await generateStructure(itemPath)
                    });
                } else {
                    structure.push({
                        name: item.name,
                        type: 'file'
                    });
                }
            }

            return structure;
        }
        const structure = await generateStructure(clonePath);
        return NextResponse.json({ success: true, structure: structure, clonePath: clonePath });
    } catch (error) {
        console.error(error);
        return NextResponse.json({ success: false, message: "Error processing repository." });
    }
}

```

app\api\getCode\route.js
```
import path from 'path';
import fs from 'fs/promises';
import { NextResponse } from 'next/server';

export async function POST(params) {
    try {
        const { clonePath, ignoreThings } = await params.json()
        async function deleteUnnecessaryFiles(basePath) {
            const items = await fs.readdir(basePath, { withFileTypes: true });
            for (const item of items) {
                const itemPath = path.join(basePath, item.name);
                if (ignoreThings.some(pattern => {
                    if (!pattern.endsWith('/')) return item.name === pattern;
                    return pattern.endsWith('/') && item.isDirectory() && item.name === pattern.slice(0, -1);
                })) {
                    await fs.rm(itemPath, { recursive: true, force: true });
                } else if (item.isDirectory()) {
                    await deleteUnnecessaryFiles(itemPath);
                }
            }
        }
        async function readFilesAndGenerateContent(basePath) {
            let result = '';

            const items = await fs.readdir(basePath, { withFileTypes: true });
            for (const item of items) {
                const itemPath = path.join(basePath, item.name);

                if (item.isDirectory()) {
                    result += await readFilesAndGenerateContent(itemPath);
                } else if (item.isFile()) {
                    const fileContent = await fs.readFile(itemPath, 'utf-8');
                    const relativePath = path.relative(clonePath, itemPath);
                    result += `${relativePath}\n\`\`\`\n${fileContent}\n\`\`\`\n\n`;
                }
            }

            return result;
        }
        await deleteUnnecessaryFiles(clonePath);
        const allFilesContent = await readFilesAndGenerateContent(clonePath);
        const outputFilePath = path.join('.', 'output', 'output.txt');
        await fs.writeFile(outputFilePath, allFilesContent, 'utf-8');
        await fs.rm(clonePath, { recursive: true, force: true });
        return NextResponse.json({ success: true, message: allFilesContent });
    } catch (error) {
        console.log(error.message)
        return NextResponse.json({ success: false })
    }
}
```

app\api\requestAI\route.js
```
import { NextResponse } from "next/server";
import OpenAI from "openai";

export async function POST(params) {
    try {
        const { message } = await params.json()
        console.log(message)
        const openai = new OpenAI({
            apiKey: process.env.OPENAI_API_KEY
        });
        const completion = await openai.chat.completions.create({
            model: "gpt-4o",
            messages: [
                {
                    role: "user",
                    content: message,
                },
            ],
        });
        return NextResponse.json({ response: completion.choices[0].message.content, success: true })
    } catch (error) {
        console.log(error.message)
        return NextResponse.json({ success: false })
    }
}
```

app\globals.css
```
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

```

app\layout.js
```
import localFont from "next/font/local";
import "./globals.css";

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {children}
      </body>
    </html>
  );
}

```

app\page.js
```
'use client';

import DirectoryTree from '@/components/DirectoryTree';
import { useEffect, useState } from 'react';

export default function Home() {
  const [repo, setRepo] = useState('');
  const [message, setMessage] = useState('');
  const [ready, setReady] = useState(false)
  const [clonePath, setClonePath] = useState('')
  const [structure, setStructure] = useState([])
  const [userSelectTime, setUserSelectTime] = useState(false)
  const [ignoreThings, setIgnoreThings] = useState([])
  const [userMessage, setUserMessage] = useState("")
  const [AIResponse, setAIResponse] = useState("")

  const handleSubmit = async () => {
    if (repo.trim().length !== 0) {
      const req = await fetch('/api/clone-repo', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ repoLink: repo }),
      })
      const res = await req.json()
      if (!res.success) {
        alert("Something went wrong")
        return;
      }
      setClonePath(res.clonePath)
      setStructure(res.structure)
    }
  }

  useEffect(() => {
    if (clonePath.trim().length !== 0 && structure.length !== 0) {
      setUserSelectTime(true)
    }
  }, [clonePath, structure])

  useEffect(() => {
    if (message.length !== 0) {
      console.log(message)
      console.log(message.trim().split(/\s+/).length)
      setReady(true)
    }
  }, [message])

  const handleFinalClick = async () => {
    if (clonePath.length !== 0 && ignoreThings.length !== 0) {
      const requestHandleFinalClick = await fetch("/api/getCode", {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ clonePath, ignoreThings })
      })
      const responseHandleFinalClick = await requestHandleFinalClick.json()
      if (!responseHandleFinalClick.success) {
        alert("Something went wrong")
        return;
      }
      setMessage(responseHandleFinalClick.message)
    }
  }

  const RequestAI = async () => {
    if (userMessage.length !== 0) {
      const requestToAI = await fetch("/api/requestAI", {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ message:`${message}\n\nIt is my codebase code, My query is:${userMessage}`})
      })
      const aiAnswer = await requestToAI.json()
      setAIResponse(aiAnswer.response)
    } else {
      alert("please input any message")
      return
    }
  }


  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
      {!ready ? (
        <div>
          {userSelectTime ? (
            <div className="max-w-4xl w-full bg-white p-6 rounded-lg shadow-lg">
              <h1 className="text-2xl font-semibold text-center text-gray-700 mb-4">
                Select Files and Folders to Ignore
              </h1>
              <DirectoryTree
                structure={structure}
                ignoreThings={ignoreThings}
                setIgnoreThings={setIgnoreThings}
              />
              <button onClick={handleFinalClick} className='p-2 bg-blue-700 rounded-md my-2'>Submit</button>
            </div>
          ) : (
            <div className="max-w-md w-full bg-white p-6 rounded-lg shadow-lg">
              <h1 className="text-2xl font-semibold text-center text-gray-700 mb-4">
                Repo URL
              </h1>

              <input
                type="text"
                value={repo}
                onChange={(e) => setRepo(e.target.value)}
                placeholder="Enter Repo URL"
                className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-4"
              />

              <button
                onClick={handleSubmit}
                className="w-full bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                Submit
              </button>
            </div>
          )}
        </div>
      ) : (
        <div className="w-full h-screen bg-gray-100 flex flex-col">
          <div className="w-full max-w-4xl bg-white p-6 rounded-lg shadow-lg h-full flex flex-col mx-auto">
            <div className="flex-1 overflow-y-auto mb-4">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Chat with Devora AI</h2>
            </div>
            <div className="flex-none">
              <div className="flex items-center gap-2">
                {AIResponse.length !== 0 && (<span>{AIResponse}</span>)}
                <input
                  value={userMessage}
                  onChange={(e) => { setUserMessage(e.target.value) }}
                  type="text"
                  className="bg-gray-200 text-gray-800 p-3 rounded-md w-full focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Type your message..."
                />
                <button onClick={RequestAI} className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">
                  Send
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );



}
```

components\DirectoryTree.js
```
'use client';
import { useState } from 'react';

const DirectoryTree = ({ structure, ignoreThings, setIgnoreThings }) => {
  const [expanded, setExpanded] = useState({});

  const handleToggle = (name) => {
    setExpanded((prev) => ({ ...prev, [name]: !prev[name] }));
  };

  const handleCheckboxChange = (item, isChecked) => {
    const itemPath = item.type === 'directory' ? `${item.name}/` : item.name;

    if (item.type === 'directory') {
      const allChildren = getAllChildPaths(item);
      if (isChecked) {
        setIgnoreThings((prev) => [...new Set([...prev, itemPath, ...allChildren])]);
      } else {
        setIgnoreThings((prev) => prev.filter((i) => ![itemPath, ...allChildren].includes(i)));
      }
    } else {
      setIgnoreThings((prev) =>
        prev.includes(itemPath) ? prev.filter((i) => i !== itemPath) : [...prev, itemPath]
      );
    }
  };

  const getAllChildPaths = (parent) => {
    let paths = [];
    if (parent.children) {
      parent.children.forEach((child) => {
        const childPath = child.type === 'directory' ? `${child.name}/` : child.name;
        paths.push(childPath);
        if (child.type === 'directory') {
          paths = [...paths, ...getAllChildPaths(child)];
        }
      });
    }
    return paths;
  };

  return (
    <ul className="pl-2">
      {structure.map((item, index) => (
        <li key={index} className="mb-2">
          <div className="flex items-center space-x-2 hover:bg-gray-100 rounded-lg p-1">
            {item.type === 'directory' && (
              <button
                onClick={() => handleToggle(item.name)}
                className="text-blue-500 hover:underline transition duration-200 ease-in-out"
              >
                {expanded[item.name] ? (
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" className="h-5 w-5"><path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd"></path></svg>
                ) : (
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" className="h-5 w-5"><path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd"></path></svg>
                )}
              </button>
            )}
            <input
              type="checkbox"
              checked={ignoreThings.includes(
                item.type === 'directory' ? `${item.name}/` : item.name
              )}
              onChange={(e) => handleCheckboxChange(item, e.target.checked)}
              className="h-4 w-4 rounded-sm border-gray-400 focus:ring-blue-500 transition duration-200 ease-in-out"
            />
            <span className="text-gray-800 font-medium text-sm">
              {item.name} {item.type === 'directory' ? '/' : ''}
            </span>
          </div>
          {item.type === 'directory' && expanded[item.name] && (
            <DirectoryTree
              structure={item.children || []}
              ignoreThings={ignoreThings}
              setIgnoreThings={setIgnoreThings}
            />
          )}
        </li>
      ))}
    </ul>
  );
};

export default DirectoryTree;
```

package.json
```
{
  "name": "devora",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "15.0.3",
    "openai": "^4.75.0",
    "os": "^0.1.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "simple-git": "^3.27.0",
    "uuid": "^11.0.3"
  },
  "devDependencies": {
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}

```

